name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10]
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pylint black isort mypy

    - name: Install Node.js dependencies
      run: |
        cd src/frontend
        npm ci

    - name: Run Python tests
      run: |
        pytest --cov=src --cov-report=xml
        pylint src tests
        black --check src tests
        isort --check-only src tests
        mypy src tests

    - name: Run Node.js tests
      run: |
        cd src/frontend
        npm run test
        npm run lint

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Run Snyk security scan
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r src tests

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Advanced CI/CD Pipeline'
        path: '.'
        format: 'HTML'
        out: 'reports'

  build:
    name: Build and Push
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push frontend
      uses: docker/build-push-action@v4
      with:
        context: ./src/frontend
        file: ./src/frontend/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push backend
      uses: docker/build-push-action@v4
      with:
        context: ./src/backend
        file: ./src/backend/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Configure Azure credentials
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Configure Google Cloud credentials
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name advanced-cicd-production --region us-west-2
        az aks get-credentials --resource-group advanced-cicd-production --name advanced-cicd-production
        gcloud container clusters get-credentials advanced-cicd-production --region us-central1

    - name: Deploy to AWS EKS
      run: |
        helm upgrade --install app ./helm \
          --namespace production \
          --set frontend.image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend \
          --set frontend.image.tag=${{ github.sha }} \
          --set backend.image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend \
          --set backend.image.tag=${{ github.sha }}

    - name: Deploy to Azure AKS
      run: |
        helm upgrade --install app ./helm \
          --namespace production \
          --set frontend.image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend \
          --set frontend.image.tag=${{ github.sha }} \
          --set backend.image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend \
          --set backend.image.tag=${{ github.sha }}

    - name: Deploy to Google GKE
      run: |
        helm upgrade --install app ./helm \
          --namespace production \
          --set frontend.image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend \
          --set frontend.image.tag=${{ github.sha }} \
          --set backend.image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend \
          --set backend.image.tag=${{ github.sha }}

  notify:
    name: Notify
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Send Slack notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()

    - name: Send email notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: CI/CD Pipeline ${{ job.status }}
        body: |
          Build: ${{ github.run_id }}
          Status: ${{ job.status }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
        to: team@example.com
        from: CI/CD Pipeline <ci@example.com>
      if: always() 